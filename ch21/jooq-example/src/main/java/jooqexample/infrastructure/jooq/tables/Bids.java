/*
 * This file is generated by jOOQ.
 */
package jooqexample.infrastructure.jooq.tables;


import jooqexample.infrastructure.jooq.DefaultSchema;
import jooqexample.infrastructure.jooq.Keys;
import jooqexample.infrastructure.jooq.tables.records.BidsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bids extends TableImpl<BidsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bids</code>
     */
    public static final Bids BIDS = new Bids();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BidsRecord> getRecordType() {
        return BidsRecord.class;
    }

    /**
     * The column <code>bids.id</code>.
     */
    public final TableField<BidsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bids.bid</code>.
     */
    public final TableField<BidsRecord, Double> BID = createField(DSL.name("bid"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>bids.auction_id</code>.
     */
    public final TableField<BidsRecord, String> AUCTION_ID = createField(DSL.name("auction_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bids.bidder_id</code>.
     */
    public final TableField<BidsRecord, String> BIDDER_ID = createField(DSL.name("bidder_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bids.time_of_bid</code>.
     */
    public final TableField<BidsRecord, LocalDateTime> TIME_OF_BID = createField(DSL.name("time_of_bid"), SQLDataType.LOCALDATETIME(6), this, "");

    private Bids(Name alias, Table<BidsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Bids(Name alias, Table<BidsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>bids</code> table reference
     */
    public Bids(String alias) {
        this(DSL.name(alias), BIDS);
    }

    /**
     * Create an aliased <code>bids</code> table reference
     */
    public Bids(Name alias) {
        this(alias, BIDS);
    }

    /**
     * Create a <code>bids</code> table reference
     */
    public Bids() {
        this(DSL.name("bids"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BidsRecord> getPrimaryKey() {
        return Keys.BIDS__PK_BIDS;
    }

    @Override
    public Bids as(String alias) {
        return new Bids(DSL.name(alias), this);
    }

    @Override
    public Bids as(Name alias) {
        return new Bids(alias, this);
    }

    @Override
    public Bids as(Table<?> alias) {
        return new Bids(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bids rename(String name) {
        return new Bids(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bids rename(Name name) {
        return new Bids(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bids rename(Table<?> name) {
        return new Bids(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids where(Condition condition) {
        return new Bids(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bids where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bids where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bids where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bids where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
